(-1 to 1).toList.permutations.toList

for {
  i <- -1 to 1
  j <- -1 to 1
} yield (i, j)


1 to 10

// List(0, 35, 45, 16, 8, 1, 7, 24, 39, 29, 7, 2, 0, 30, 38, 17, 14, 1, 3, 28, 42, 13, 11, 6, 1, 31, 39, 13, 12, 1, 5, 30, 40, 15, 10, 0, 1, 34, 43, 12, 10, 1, 0, 28, 48, 13, 11, 0, 1, 27, 41, 21, 12, 0, 0, 26, 42, 13, 16, 3, 0, 28, 41, 13, 3, 13, 4, 28, 43, 13, 0, 1, 13, 30, 44, 12, 0, 1, 1, 40, 47, 12, 1, 0, 1, 23, 60, 17, 0, 0, 3, 19, 16, 59, 6, 0, 0, 33, 2, 13, 49, 7, 6, 25, 0, 12, 34, 29, 1, 26, 1, 19, 24, 4, 26, 27, 8, 13, 24, 1, 1, 61, 1, 12, 25, 1, 1, 18, 43, 12, 26, 5, 13, 1, 0, 56, 30, 13, 0, 0, 1, 10, 89, 0, 0, 0, 4, 7, 2, 87, 4, 0, 0, 9, 0, 0, 91, 0, 1, 7, 1, 0, 0, 92, 1, 6, 0, 1, 0, 0, 93, 6, 0, 0, 1, 0, 1, 98, 0, 1, 1, 0, 0, 0, 0, 99, 0, 1, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0)

def loop(v: Int): LazyList[Int] = v #:: loop(v + 1)


val lazylist1: LazyList[Int] = {
  def loop(v: Int): LazyList[Int] = v #:: loop(v + 1)
  loop(1)
}

lazylist1.takeWhile(_ != 21).size